const fs = require('fs'),
	path = require('path'),
	htmlToJson = require('html-to-json'),
	captureImages = require('./captureImages'),
	printModel = require('./printModel'),
	panelObj = require('./panelObj'),
	printImages = require('./printImages'),
	printProvider = require('./printProvider'),
	errHandling = require('./errHandling');


let captureHtml = ( url, print ) => {
	let httpRegEx = /^https:\/\//;
	if ( httpRegEx.test( url ) === false ) {
		url = 'https://' + url;
	}
	//console.log('url' + url);
	//return false;
	var promise = htmlToJson.request( url, {
		'title' : ['title', function ($title) {
			return $title.text().trim();
		}],
		'images' : ['img', function ($img) {
		    return $img.attr('src');
		}],
		'navItem' : ['.nav-item', function ($nav) {
			return $nav.html();
		}],
		'tabPanel' : ['.tab-pane', function ($tab) {
			return $tab.html().trim();
		}],
		'hero' : ['.hero', function ($hero) {
			return $hero.text().trim();
		}],
		'borderColor' : ['.hero', function ($hero) {
			return $hero.attr('data-border-color');
		}],
		'tileLogo' : ['.provider-view', function ($provider) {
			return $provider.attr('src');
		}],
		'provider' : ['.provider-view', function($provider){
			return $provider.attr('alt');
		}],
		'appDetails' : ['.app-details', function ($appDetails) {
			return $appDetails.text().trim();
		}],
		'tabContent' : ['.tab-content', function ($tabContent) {
			return $tabContent.text().trim();
		}],
		'businessFunction' : ['#SubCategorySales', function ($business) {
			return $business.text().trim();
		}],
		'datePublished' : ['#AppLastUpdated', function ($publication) {
			return $publication.text().trim();
		}]
	}, ( err, results ) => {
		if ( typeof results.appDetails[0] !== 'undefined') {

			let tileLogo = errHandling(results.tileLogo[0]),
				provider = errHandling(results.provider[0]);

			let images = captureImages( results ),
				title = errHandling(results.title[0]),
				fileName = errHandling(results.title[0]).replace(/\s/gi, '_'),
				hero = errHandling(results.hero[0].replace(/(\n)|(\t)|(\r)/gi,'')),
				tileBorderColor = errHandling(results.borderColor[0]),
				appDetails = errHandling(results.appDetails[0]).replace(/(\n)|(\t)|(\r)/gi,''),
				tabContent = errHandling(results.tabContent[0]).replace(/(\n)|(\t)|(\r)/gi,'');
				businessFunction = errHandling(results.businessFunction[0]).replace(/(\n)|(\t)|(\r)/gi,'');
				datePublished = errHandling(results.datePublished[0]).replace(/(\n)|(\t)|(\r)/gi,'');

			let navContainer = "<div class='app container app-details' '=''><ul class='product-menu line-bottom list-inline text-center xs-pt-5 xs-pb-5' role='tablist'>${navContent}</ul></div>";
			let tabContainer = "<div class='tab-content'>${tabContent}</div>";
			let navPanel = new panelObj(errHandling(results.navItem[0]), errHandling(results.navItem[1]), errHandling(results.navItem[2]));
			let tabPanel = new panelObj(errHandling(results.tabPanel[0]), errHandling(results.tabPanel[1]), errHandling(results.tabPanel[2]));

			fileName = fileName.replace(/(\,)|(\:)|(\|)|(\/)||(\')/gi, '');
			let thisPrint = new printModel(title, url, images, hero, navContainer, navPanel, tabContainer, tabPanel, businessFunction, datePublished, provider, tileBorderColor, tileLogo);

			let newDir = path.join( print, fileName + "/" );
			let newImgDir = path.join(newDir, "/img/");

			console.log("provider is " + provider);

			fs.mkdir( newDir, ( err ) => {

				if ( err ) {
					console.log(err);
				}

				if ( fs.existsSync( newImgDir ) ) {

					printImages(images, newImgDir);
					printProvider(tileLogo, provider, newImgDir);

					fs.writeFile(newDir + fileName + '.json', JSON.stringify(thisPrint), ( err ) => {
						if ( err ) {
							console.log(err);
						}
						console.log(fileName + '.html has been added to ' + print);
					});

				} else {

					fs.mkdir( newImgDir, ( err ) => {

						printImages(images, newImgDir);
						printProvider(tileLogo, provider, newImgDir);

						fs.writeFile(newDir + fileName + '.json', JSON.stringify(thisPrint), ( err ) => {
							if ( err ) {
								console.log(err);
							}
							console.log(fileName + '.html has been added to ' + print);
						});

					});

				}
			});
		}
	});
};

module.exports = captureHtml;