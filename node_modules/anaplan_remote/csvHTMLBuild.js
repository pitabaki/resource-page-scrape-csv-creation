"use strict";

const httpsCheck = /^https/,
	fs = require("fs"),
	request = require("request"),
	cheerio = require("cheerio"),
	htmlGAMRKT = require("./htmlGAMRKT.js"), //(ga, content, marketo)
	htmlMRKT = require("./htmlMRKT.js"), //(content, marketo)
	htmlGA = require("./htmlGA.js"), //(content, GA)
	htmlCont = require("./htmlCont.js");

const ruCheck = /^ru/,
	deCheck = /^de/;

let csvHTMLBuild = (list, basePath, regArr = /html$/) => {
	//run for loop to avoid callback error
	for (var x = 0; x < list.length; x++) {
		//snag current URL
		let currentURL = list[x].URL,
			currentGA = list[x].GA,
			currentMRKT = list[x].EmbedForm;

		if (httpsCheck.test(currentURL) !== true && currentURL.length !== 0) {
			let name;
			if ( typeof regArr === "object" ) {
				for ( var n = 0; n < regArr.length; n++ ) {
					if ( n < 1 ) {
						name = currentURL.replace(regArr[n], "");
					} else {
						name = name.replace(regArr[n],"");
					}
				}
			} else {
				let name = currentURL.replace(regArr, "");
			}

			request( {url:currentURL}, function(err, res, html){
				if(err){
					console.log(err)
				}
				var $ = cheerio.load(html, { decodeEntities: false });
				var c = $('#BodyContent').html(),
					currentIMG = $('.img-responsive').eq(1).attr("src");

				if (typeof c !== "object") {

					if (typeof currentIMG === "undefined" || currentIMG === undefined) {
						currentIMG = "";
					}

					if (currentGA !== "" && currentMRKT !== "") {
						var newHTML = htmlGAMRKT(currentGA,currentIMG, c, currentMRKT);
					} else if (currentGA !== "" && currentMRKT === "") {
						var newHTML = htmlGA(currentIMG, c, currentGA);
					} else if (currentGA === "" && currentMRKT !== "") {
						var newHTML = htmlMRKT(currentIMG, c, currentMRKT);
					} else {
						var newHTML = htmlCont(currentIMG, c);
					}
					//htmlConst()
					if (ruCheck.test(name) === true) {
						fs.writeFile(basePath + "russian/" + name + "html", newHTML);
					} else if (deCheck.test(name) === true) {
						fs.writeFile(basePath + "german/" + name + "html", newHTML);
					} else {
						fs.writeFile(basePath + "other/" + name + "html", newHTML);
					}
				}
				return false;

			});	
		}
	}
}

module.exports = csvHTMLBuild;
